name: AI Agents Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

jobs:
  run-ai-agents:
    runs-on: ubuntu-latest
    
    env:
      GROQ_API_ENDPOINT: ${{ secrets.GROQ_API_ENDPOINT }}
      GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.13.0
      uses: actions/setup-python@v4
      with:
        python-version: 3.13.0

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Build Predictor Agent
      run: |
        python -c "
        from agents.build_predictor_agent import BuildPredictorAgent, BuildPredictorConfig
        import os
        
        agent = BuildPredictorAgent(BuildPredictorConfig(
            groq_api_key=os.environ['GROQ_API_KEY']
        ))
        result = agent.predict_build_failure({'pr_number': '${{ github.event.pull_request.number }}'})
        print(result)
        "

    - name: Run Code Review Agent
      run: |
        python -c "
        from agents.code_review_agent import CodeReviewAgent, CodeReviewConfig
        import os
        
        agent = CodeReviewAgent(CodeReviewConfig(
            groq_api_endpoint=os.environ['GROQ_API_ENDPOINT'],
            groq_api_key=os.environ['GROQ_API_KEY'],
            github_token=os.environ['GITHUB_TOKEN'],
            repo_name='${{ github.repository }}',
            pull_request_number=${{ github.event.pull_request.number }}
        ))
        agent.run()
        "

    - name: Run Chat Agent
      run: |
        python -c "
        from agents.chat_agent import ChatAgent, ChatAgentConfig
        import os
        
        agent = ChatAgent(ChatAgentConfig(
            chat_model_id='llama3-8b-8192',
            groq_api_endpoint=os.environ['GROQ_API_ENDPOINT'],
            groq_api_key=os.environ['GROQ_API_KEY'],
            github_token=os.environ['GITHUB_TOKEN'],
            repo_name='${{ github.repository }}',
            pull_request_number=${{ github.event.pull_request.number }}
        ))
        agent.run()
        " 